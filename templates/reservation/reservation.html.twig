{% extends "base.html.twig" %}


{% block javascripts %}
	 <script>
	document.addEventListener('DOMContentLoaded', function () {
	

	               const form = document.querySelector('form'); // Sélectionner le formulaire
					 const SeanceSelect = document.getElementById('reservation_horaire');
            
								  const checkBoxPMR = document.getElementById('reservation_PersonneAMobiliteReduite');
									const NbPlacesPMRSelect = document.getElementById('reservation_NbPlacesPMR');
									const NbPlacesSelect = document.getElementById('reservation_NbPlaces');
									const submitButton = document.getElementById('submit-button');
									const redirectButton = document.getElementById('redirect-button');
									const PrixReservation = document.getElementById('reservation_Prix');
									const notValuePmr = document.getElementById('notValuePmr');
									
									
	                const filmId = {{ film.id}};
	                
	    
	                async function loadData() {
						  //restoreFormData() ;
					isDisabled(submitButton,redirectButton)
	            
	                try {
								            const responseSeance = await fetch("{{ path('ajax_get_seances_by_film') }}", {
								                method: 'POST',
								                headers: {
								                    'Content-Type': 'application/json',
								                    'X-Requested-With': 'XMLHttpRequest'
								                },
								                body: JSON.stringify({ film_Id: filmId })
								             
								            });
	                          
								
								      
								                const dataHoraire = await responseSeance.json();
												
												
	                        					const horaires = dataHoraire.horaireArraySeance;
	                   
	                       
	
	                        //
	                    	SeanceSelect.innerHTML = '';
	                        const option = document.createElement('option');
							
	                        option.value = 0;
	                                    option.textContent = "Sélectionner une seance" ;
	                                    SeanceSelect.appendChild(option);
	          
	                          horaires.forEach(horaire => {

								if(!isSeanceTimePassed(horaire.jour , horaire.debut)){
	                            const option = document.createElement('option');
	                            option.value = horaire.id;
	                            option.textContent = horaire.jour +" " + horaire.debut +"h à "+ horaire.fin  + "h diffusion " + horaire.qualite;
	                            
								SeanceSelect.appendChild(option);
								}
	                            
	                          })
	                         
	                      
	                        } catch (error) {
	                            console.error('Erreur lors de la requête:', error);
	                        }
	}
	loadData();
	           SeanceSelect.addEventListener('change', async function () {
		
				if(this.value >= 1){
					checkBoxPMR.disabled = false
					NbPlacesSelect.disabled = false
					const horaireId = SeanceSelect.value;
 try {
								            const responseSeance = await fetch("{{ path('ajax_get_seances_by_horaire') }}", {
								                method: 'POST',
								                headers: {
								                    'Content-Type': 'application/json',
								                    'X-Requested-With': 'XMLHttpRequest'
								                },
								                body: JSON.stringify({ Horaire_Id: horaireId })
								             
								            });
	                          
								
								     
								                const dataSeance = await responseSeance.json();
												
												const nbPlaceSeance = dataSeance.seanceArray;
												
												const placedispoSeance = nbPlaceSeance[0];

												if(placedispoSeance.placesDispo == 0){
							  NbPlacesSelect.innerHTML = '';
							  NbPlacesSelect.disabled =true;
												}else{
											
						NbPlacesSelect.innerHTML = '';
	                          const option = document.createElement('option');
	                        option.value = 0;
	                                    option.textContent = "Nombre de place(s) :" ;
	                                    NbPlacesSelect.appendChild(option);
	          
	                  

								for (let a = 1; a <= placedispoSeance.placesDispo ; a++) {
								const option = document.createElement('option');
								option.value = placedispoSeance.id;
	                            option.textContent =  a;
								option.setAttribute('data-content-place', a);
								option.setAttribute('data-price', placedispoSeance.prix);
	                            NbPlacesSelect.appendChild(option);
											}			
	                            
	                           if(NbPlacesSelect.value >= 1){
								
								notDisabled(submitButton,redirectButton );
							
							   }
												}	
	                     
	                          
											
	                        } catch (error) {
	                            console.error('Erreur lors de la requête:', error);
	                        }
		

				}else{

										
												NbPlacesSelect.disabled = true;
										
					console.error('Erreur lors de la sélection de la séance :', error);
				}
	
});            
	
	 checkBoxPMR.addEventListener('change', async function () {

			if(checkBoxPMR.checked){
				NbPlacesPMRSelect.disabled = false;
				const horaireId = SeanceSelect.value;
				 try {
								            const responseSeance = await fetch("{{ path('ajax_get_seances_by_horaire') }}", {
								                method: 'POST',
								                headers: {
								                    'Content-Type': 'application/json',
								                    'X-Requested-With': 'XMLHttpRequest'
								                },
								                body: JSON.stringify({ Horaire_Id: horaireId })
								             
								            });
	                          
								
						
								                const dataSeance = await responseSeance.json();
												
												const nbPlaceSeance = dataSeance.seanceArray;
												
												const placedispoSeancePMR = nbPlaceSeance[0];

										
							if(placedispoSeancePMR.placeDispoPMR == 0){
							  NbPlacesPMRSelect.innerHTML = '';
							  NbPlacesPMRSelect.disabled =true;
							  

							}else{
							  NbPlacesPMRSelect.innerHTML = '';
	                          const option = document.createElement('option');
	                          option.value = 0;
	                          option.textContent = "Nombre de place(s)" ;
	                          NbPlacesPMRSelect.appendChild(option);
	        
	                  

								for (let a = 1; a <= placedispoSeancePMR.placeDispoPMR ; a++) {
								const option = document.createElement('option');
								option.value = placedispoSeancePMR.id;
	                            option.textContent =  a;
								option.setAttribute('data-price-pmr', placedispoSeancePMR.prix);
								option.setAttribute('data-content-PMR', a);
	                            NbPlacesPMRSelect.appendChild(option);
											}			
	                            
	                           if(NbPlacesPMRSelect.value >= 1){
								notDisabled(submitButton,redirectButton );
							
							   }
							}
	                     
	                          
											
	                        } catch (error) {
	                            console.error('Erreur lors de la requête:', error);
	                        }

			}else{
				NbPlacesPMRSelect.disabled = true;
			}


			});
			

	NbPlacesSelect.addEventListener('change', calculatePrice);
    NbPlacesPMRSelect.addEventListener('change', calculatePrice);

	



function isDisabled(submitButton ,redirectButton){
	if(submitButton != null){
submitButton.disabled =true;
	}else if (redirectButton != null){
		redirectButton.disabled = true;
	}
}


function notDisabled(submitButton ,redirectButton){
	if(submitButton != null){
submitButton.disabled =false;
	}else if (redirectButton != null){
		redirectButton.disabled = false;
	}
}


 function isSeanceTimePassed(jourAComparer, heureAComparer){

	const joursSemaine = ["Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi", "Dimanche"];

    // Obtenez la date et l'heure actuelles
    const maintenant = new Date();
    // Ajuster le jour actuel pour que lundi soit 0, on viens ajouter + 6 à l'index du jour pour ensuite faire modulo 7 sur ce dernier,
	//ce qui change l'ordre pour que dimanche soit placer à la fin de la liste. Si je ne fait pas cela il sera mis à l'index 0.
    const jourActuelIndex = (maintenant.getDay() + 6) % 7; 
    const jourActuel = joursSemaine[jourActuelIndex];
    const heureActuelle = maintenant.toTimeString().split(' ')[0].substring(0, 5); // Récupère l'heure actuelle au format HH:MM

	const jourAComparerIndex = joursSemaine.indexOf(jourAComparer);

	if (jourAComparerIndex > jourActuelIndex){
		return false ; // la seance n'est pas passé
	}else if ( jourAComparerIndex < jourActuelIndex){
		return true ;
	}else{
		// Si le jour est le même on viens vérifier l'heure
		if(heureAComparer > heureActuelle){
			return false ; // la séance n'est pas passé
		}else{
			return true ; // la séance est passé
		}
	}
 }
function saveFormDataAndRedirect(event) {

	event.preventDefault();

	 // Récupérer les données du formulaire
            const formData = {
                Seance :  document.getElementById("reservation_seance").value,
				Pmr : document.getElementById("reservation_PersonneAMobiliteReduite").checked,
				NbPlacesPMR : document.getElementById("reservation_NbPlacesPMR").value,
				NbPlaces : document.getElementById("reservation_NbPlaces").value,
				Prix : document.getElementById("reservation_Prix").value
            };

	localStorage.setItem('formData', JSON.stringify(formData));
	console.log("test");
	window.location.href = '{{ path("app_login") }}';
			  

}

function restoreFormData() {
	
	 const savedFormData = localStorage.getItem('formData');
	 
    if (savedFormData) {
		notDisabled(submitButton ,redirectButton);
        const formData = JSON.parse(savedFormData);
        
        document.getElementById('reservation_seance').value = formData.Seance || '';
        document.getElementById('reservation_PersonneAMobiliteReduite').checked = formData.Pmr || false;
		document.getElementById("reservation_NbPlacesPMR").value = formData.NbPlacesPMR || '';
		document.getElementById("reservation_NbPlaces").value = formData.NbPlaces || '';
		document.getElementById("reservation_Prix").value = formData.Prix || '';
        
    
             // Supprimer les données du localStorage
                localStorage.removeItem('formData');
    }
	
}


	async function calculatePrice(){
	
	
let totalPrice =0;
           
			
			if(NbPlacesPMRSelect.value >= 1 && NbPlacesSelect.value == 0){

			const selectedPMROption = NbPlacesPMRSelect.selectedOptions[0];
       


	
			const selectedIndexPMR = NbPlacesPMRSelect.selectedIndex;  // Get the index of the selected option

			const selectedOptionPMR = NbPlacesPMRSelect.options[selectedIndexPMR];
			
            const pmr = parseInt(selectedPMROption.textContent, 10);

            const pricePlacePMR = parseInt(selectedOptionPMR.getAttribute('data-price-pmr'));

       		 totalPrice = pmr * pricePlacePMR;
			 notDisabled(submitButton,redirectButton );

			

			}else if(NbPlacesSelect.value >= 1 && NbPlacesPMRSelect.value == 0){
			
		
            const selectedPlaceOption = NbPlacesSelect.selectedOptions[0];
			console.log(selectedPlaceOption);

        
            const places = parseInt(selectedPlaceOption.textContent, 10);
			


			const selectedIndex = NbPlacesSelect.selectedIndex;  // Get the index of the selected option
            const selectedOption = NbPlacesSelect.options[selectedIndex];

	
            const pricePlace = parseInt(selectedOption.getAttribute('data-price'));

			totalPrice = (places * pricePlace) ;
			notDisabled(submitButton,redirectButton );


			}else if (NbPlacesPMRSelect.value >= 1 && NbPlacesSelect.value >= 1){

        	const selectedPMROption = NbPlacesPMRSelect.selectedOptions[0];
            const selectedPlaceOption = NbPlacesSelect.selectedOptions[0];

			console.log(selectedPlaceOption);

            const pmr = parseInt(selectedPMROption.textContent, 10);
            const places = parseInt(selectedPlaceOption.textContent, 10);

			const selectedIndex = NbPlacesSelect.selectedIndex;  // Get the index of the selected option
            const selectedOption = NbPlacesSelect.options[selectedIndex];

	
            const pricePlace = parseInt(selectedOption.getAttribute('data-price'));


			const selectedIndexPMR = NbPlacesPMRSelect.selectedIndex;  // Get the index of the selected option

			const selectedOptionPMR = NbPlacesPMRSelect.options[selectedIndexPMR];

            const pricePlacePMR = parseInt(selectedOptionPMR.getAttribute('data-price-pmr'));


       		 totalPrice = (places * pricePlace) + (pmr * pricePlacePMR);
			 notDisabled(submitButton,redirectButton );

			}
			else if (NbPlacesPMRSelect.value == 0 && NbPlacesSelect.value == 0){
				notDisabled(submitButton,redirectButton );

			}

		PrixReservation.value = totalPrice;
	}
NbPlacesSelect.addEventListener('change', function() {
        let hiddenInputContent = document.querySelector('input[name="dataContentPlace"]');
        
        // Si le champ caché n'existe pas, créez-le
        if (!hiddenInputContent) {
            hiddenInputContent = document.createElement('input');
            hiddenInputContent.type = 'hidden';
            hiddenInputContent.name = 'dataContentPlace'; // Nom du champ caché
            form.appendChild(hiddenInputContent);
        }
        
        // Récupérer l'option sélectionnée
        const selectedOption = NbPlacesSelect.options[NbPlacesSelect.selectedIndex];
        
        // Récupérer l'attribut data-content-PMR de l'option sélectionnée
        const dataContent = selectedOption.getAttribute('data-content-place');
        
        // Mettre à jour la valeur du champ caché
        if (dataContent) {
            hiddenInputContent.value = dataContent; // Valeur du champ caché
        }
    });

    NbPlacesPMRSelect.addEventListener('change', function() {
        let hiddenInputContent = document.querySelector('input[name="dataContentPMR"]');
        
        // Si le champ caché n'existe pas, créez-le
        if (!hiddenInputContent) {
            hiddenInputContent = document.createElement('input');
            hiddenInputContent.type = 'hidden';
            hiddenInputContent.name = 'dataContentPMR'; // Nom du champ caché
            form.appendChild(hiddenInputContent);
        }
        
        // Récupérer l'option sélectionnée
        const selectedOption = NbPlacesPMRSelect.options[NbPlacesPMRSelect.selectedIndex];
        
        // Récupérer l'attribut data-content-PMR de l'option sélectionnée
        const dataContentPMR = selectedOption.getAttribute('data-content-PMR');
        
        // Mettre à jour la valeur du champ caché
        if (dataContentPMR) {
            hiddenInputContent.value = dataContentPMR; // Valeur du champ caché
        }
    });

	function handlePrice(event){
        let hiddenInputContent = document.querySelector('input[name="dataContentPrix"]');
        
        // Si le champ caché n'existe pas, créez-le
        if (!hiddenInputContent) {
            hiddenInputContent = document.createElement('input');
            hiddenInputContent.type = 'hidden';
            hiddenInputContent.name = 'dataContentPrix'; // Nom du champ caché
            form.appendChild(hiddenInputContent);
        }
        
        // Mettre à jour la valeur du champ caché
        if (PrixReservation.value) {
            hiddenInputContent.value = PrixReservation.value; // Valeur du champ caché
        }
   
	}

	 if (form) {
        form.addEventListener('submit', function(event) {
            // Appeler votre méthode avant la soumission du formulaire
            handlePrice(event);
        });
    }
	});

	
	</script>

{% endblock %}

{% block body %}

<fieldset class="film-reservation-fieldset">
    <legend class="film-title">{{ film.titre }}</legend>
    <div class="image-form">
    <img src="{{ asset('uploads/images/' ~ film.idImage) }}" alt="{{ film.titre }}" class="image-reservation">
    </div>
    {{ form_start(formReservation) }}

    <div class="custom-form-group">
        {{ form_label(formReservation.horaire, 'Séances de la semaine : ', {'label_attr': {'class': 'custom-form-label'}}) }}
        {{ form_widget(formReservation.horaire, {'attr': {'class': 'custom-form-control'}}) }}
        {{ form_errors(formReservation.horaire) }}
    </div>

    <div class="custom-form-check enhanced-checkbox">
        {{ form_label(formReservation.PersonneAMobiliteReduite, 'Personne à mobilité réduite :    ', {'label_attr': {'class': 'custom-form-check-label'}}) }}
        {{ form_widget(formReservation.PersonneAMobiliteReduite , {'attr': {'class': 'custom-form-check-input'}}) }}
        {{ form_errors(formReservation.PersonneAMobiliteReduite) }}
    </div>

    <div class="custom-form-group">
        {{ form_label(formReservation.NbPlacesPMR, 'Sélectionnez le nombre de place(s) (PMR) : ', {'label_attr': {'class': 'custom-form-label mt-4'}}) }}
        {{ form_widget(formReservation.NbPlacesPMR, {'attr': {'class': 'custom-form-control'}}) }}
        {{ form_errors(formReservation.NbPlacesPMR) }}
        <div class="notValuePmr"></div>
    </div>

    <div class="custom-form-group">
        {{ form_label(formReservation.NbPlaces, 'Sélectionnez le nombre de place(s) que vous souhaitez réserver :', {'label_attr': {'class': 'custom-form-label mt-4'}}) }}
        {{ form_widget(formReservation.NbPlaces, {'attr': {'class': 'custom-form-control'}}) }}
        {{ form_errors(formReservation.NbPlaces) }}
    </div>

    <div class="custom-form-group">
        {{ form_label(formReservation.Prix, 'Prix ', {'label_attr': {'class': 'custom-form-label mt-4'}}) }}
        {{ form_widget(formReservation.Prix, {'attr': {'class': 'custom-form-control'}}) }}
        {{ form_errors(formReservation.Prix) }}
    </div>

    <br>

    {% if not app.user %}
        <a class="custom-btn" href="{{ path('app_login') }}">Réserver</a>
    {% else %}
        <button type="submit" class="custom-btn custom-btn-primary" id="submit-button">
            Réserver
        </button>
    {% endif %}
    {{ form_end(formReservation) }}

</fieldset>

{% endblock %}

