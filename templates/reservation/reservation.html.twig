{% extends "base.html.twig" %}


{% block javascripts %}
	 <script>
	document.addEventListener('DOMContentLoaded', function () {
	               
					 const SeanceSelect = document.querySelector('[name="reservation\\[seance\\]"]');
            
								  const checkBoxPMR = document.getElementById('reservation_PersonneAMobiliteReduite');
									const NbPlacesPMRSelect = document.getElementById('reservation_NbPlacesPMR');
									const NbPlacesSelect = document.getElementById('reservation_NbPlaces');
									const submitButton = document.getElementById('submit-button');
									const PrixReservation = document.getElementById('reservation_Prix');
									
	                const filmId = {{ film.id}};
	                
	    
	                async function loadData() {
	                submitButton.disabled = true;
	                try {
								            const responseSeance = await fetch("{{ path('ajax_get_seances_by_film') }}", {
								                method: 'POST',
								                headers: {
								                    'Content-Type': 'application/json',
								                    'X-Requested-With': 'XMLHttpRequest'
								                },
								                body: JSON.stringify({ film_Id: filmId })
								             
								            });
	                          
								
								            if (responseSeance.ok) {
								                const dataHoraire = await responseSeance.json();
												
												
	                        const horaires = dataHoraire.horaireArraySeance;
	                   
	                       
	
	                        //
	                    
	                        const option = document.createElement('option');
	                        option.value = 0;
	                                    option.textContent = "Sélectionner une seance" ;
	                                    SeanceSelect.appendChild(option);
	          
	                          horaires.forEach(horaire => {

								if(!isSeanceTimePassed(horaire.jour , horaire.debut)){
	                            const option = document.createElement('option');
	                            option.value = horaire.id;
	                            option.textContent = horaire.jour +" " + horaire.debut +"h à "+ horaire.fin  + "h diffusion " + horaire.qualite;
	                            
								SeanceSelect.appendChild(option);
								}
	                            
	                          })
	                          
	                            } else {
	                                console.error('Erreur lors du chargement des seances:', responseSeance.statusText);
	                            }
	                      
	                        } catch (error) {
	                            console.error('Erreur lors de la requête:', error);
	                        }
	}
	loadData();
	           SeanceSelect.addEventListener('change', async function () {
		
				if(this.value >= 1){
					checkBoxPMR.disabled = false
					NbPlacesSelect.disabled = false
					const horaireId = SeanceSelect.value;
 try {
								            const responseSeance = await fetch("{{ path('ajax_get_seances_by_horaire') }}", {
								                method: 'POST',
								                headers: {
								                    'Content-Type': 'application/json',
								                    'X-Requested-With': 'XMLHttpRequest'
								                },
								                body: JSON.stringify({ Horaire_Id: horaireId })
								             
								            });
	                          
								
								            if (responseSeance.ok) {
								                const dataSeance = await responseSeance.json();
												
												const nbPlaceSeance = dataSeance.seanceArray;
												
												const placedispoSeance = nbPlaceSeance[0];
											
						
	                          const option = document.createElement('option');
	                        option.value = 0;
	                                    option.textContent = "Nombre de place(s) :" ;
	                                    NbPlacesSelect.appendChild(option);
	          
	                  

								for (let a = 1; a <= placedispoSeance.placesDispo ; a++) {
								const option = document.createElement('option');
								option.value = placedispoSeance.id;
	                            option.textContent =  a;
								option.setAttribute('data-price', placedispoSeance.prix);
	                            NbPlacesSelect.appendChild(option);
											}			
	                            
	                           if(NbPlacesSelect.value >= 1){
								submitButton.disabled = false;
							
							   }
	                            
	                     
	                          
											}
	                        } catch (error) {
	                            console.error('Erreur lors de la requête:', error);
	                        }
		

				}else{

										
												NbPlacesSelect.disabled = true;
										
					console.error('Erreur lors de la sélection de la séance :', error);
				}
	
});            
	
	 checkBoxPMR.addEventListener('change', async function () {

			if(checkBoxPMR.checked){
				NbPlacesPMRSelect.disabled = false;
				const horaireId = SeanceSelect.value;
				 try {
								            const responseSeance = await fetch("{{ path('ajax_get_seances_by_horaire') }}", {
								                method: 'POST',
								                headers: {
								                    'Content-Type': 'application/json',
								                    'X-Requested-With': 'XMLHttpRequest'
								                },
								                body: JSON.stringify({ Horaire_Id: horaireId })
								             
								            });
	                          
								
								            if (responseSeance.ok) {
								                const dataSeance = await responseSeance.json();
												
												const nbPlaceSeance = dataSeance.seanceArray;
												
												const placedispoSeancePMR = nbPlaceSeance[0];

										
											
						
	                          const option = document.createElement('option');
	                        option.value = 0;
	                                    option.textContent = "Nombre de place(s)" ;
	                                    NbPlacesPMRSelect.appendChild(option);
	          
	                  

								for (let a = 1; a <= placedispoSeancePMR.placeDispoPMR ; a++) {
								const option = document.createElement('option');
								option.value = placedispoSeancePMR.id;
	                            option.textContent =  a;
								option.setAttribute('data-price-pmr', placedispoSeancePMR.prix);
	                            NbPlacesPMRSelect.appendChild(option);
											}			
	                            
	                           if(NbPlacesPMRSelect.value >= 1){
								submitButton.disabled = false;
							
							   }
	                            
	                     
	                          
											}
	                        } catch (error) {
	                            console.error('Erreur lors de la requête:', error);
	                        }

			}else{
				NbPlacesPMRSelect.disabled = true;
			}


			});

	NbPlacesSelect.addEventListener('change', calculatePrice);
    NbPlacesPMRSelect.addEventListener('change', calculatePrice);


 function isSeanceTimePassed(jourAComparer, heureAComparer){

	const joursSemaine = ["Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi", "Dimanche"];

    // Obtenez la date et l'heure actuelles
    const maintenant = new Date();
    // Ajuster le jour actuel pour que lundi soit 0, on viens ajouter + 6 à l'index du jour pour ensuite faire modulo 7 sur ce dernier,
	//ce qui change l'ordre pour que dimanche soit placer à la fin de la liste. Si je ne fait pas cela il sera mis à l'index 0.
    const jourActuelIndex = (maintenant.getDay() + 6) % 7; 
    const jourActuel = joursSemaine[jourActuelIndex];
    const heureActuelle = maintenant.toTimeString().split(' ')[0].substring(0, 5); // Récupère l'heure actuelle au format HH:MM

	const jourAComparerIndex = joursSemaine.indexOf(jourAComparer);

	if (jourAComparerIndex > jourActuelIndex){
		return false ; // la seance n'est pas passé
	}else if ( jourAComparerIndex < jourActuelIndex){
		return true ;
	}else{
		// Si le jour est le même on viens vérifier l'heure
		if(heureAComparer > heureActuelle){
			return false ; // la séance n'est pas passé
		}else{
			return true ; // la séance est passé
		}
	}
 }


	async function calculatePrice(){
	
	
let totalPrice =0;
           
			
			if(NbPlacesPMRSelect.value >= 1 && NbPlacesSelect.value == 0){

			const selectedPMROption = NbPlacesPMRSelect.selectedOptions[0];
       


	
			const selectedIndexPMR = NbPlacesPMRSelect.selectedIndex;  // Get the index of the selected option

			const selectedOptionPMR = NbPlacesPMRSelect.options[selectedIndexPMR];
			
            const pmr = parseInt(selectedPMROption.textContent, 10);

            const pricePlacePMR = parseInt(selectedOptionPMR.getAttribute('data-price-pmr'));

       		 totalPrice = pmr * pricePlacePMR;
			 submitButton.disabled = false;

			

			}else if(NbPlacesSelect.value >= 1 && NbPlacesPMRSelect.value == 0){

		
            const selectedPlaceOption = NbPlacesSelect.selectedOptions[0];

        
            const places = parseInt(selectedPlaceOption.textContent, 10);


			const selectedIndex = NbPlacesSelect.selectedIndex;  // Get the index of the selected option
            const selectedOption = NbPlacesSelect.options[selectedIndex];

	
            const pricePlace = parseInt(selectedOption.getAttribute('data-price'));

			totalPrice = (places * pricePlace) ;
			submitButton.disabled = false;


			}else if (NbPlacesPMRSelect.value >= 1 && NbPlacesSelect.value >= 1){

        	const selectedPMROption = NbPlacesPMRSelect.selectedOptions[0];
            const selectedPlaceOption = NbPlacesSelect.selectedOptions[0];

            const pmr = parseInt(selectedPMROption.textContent, 10);
            const places = parseInt(selectedPlaceOption.textContent, 10);

			const selectedIndex = NbPlacesSelect.selectedIndex;  // Get the index of the selected option
            const selectedOption = NbPlacesSelect.options[selectedIndex];

	
            const pricePlace = parseInt(selectedOption.getAttribute('data-price'));


			const selectedIndexPMR = NbPlacesPMRSelect.selectedIndex;  // Get the index of the selected option

			const selectedOptionPMR = NbPlacesPMRSelect.options[selectedIndexPMR];

            const pricePlacePMR = parseInt(selectedOptionPMR.getAttribute('data-price-pmr'));


       		 totalPrice = (places * pricePlace) + (pmr * pricePlacePMR);
			 submitButton.disabled = false;

			}
			else if (NbPlacesPMRSelect.value == 0 && NbPlacesSelect.value == 0){
				submitButton.disabled = true;

			}

		PrixReservation.value = totalPrice;
	}
	});

	
	</script>

{% endblock %}

{% block body %}

	{# Affiche du film avec ces informations #}


	<fieldset>
		<legend>
			{{ film.titre }}</legend>

		<img src="{{ asset('uploads/images/' ~ film.idImage) }}" alt="{{ film.titre }}">

		{{ form_start(formReservation) }}

		{# Selection de la SEANCE proposé par le cinéma #}
		<div class="form-group">
			
				{{ form_label(formReservation.seance, 'Séances de la semaine : ', {'label_attr': {'class': 'form-check-label'}}) }}
				{{ form_widget(formReservation.seance, {'attr': {'class': 'form-control'}}) }}
				{{ form_errors(formReservation.seance) }}
			
		</div>

		{# une CASE A COCHER pour savoir si PMR affichera également une liste déroulante pour donner la liste déroulante pour les place dispo PMR #}

		<div class="form-check">
			{{ form_label(formReservation.PersonneAMobiliteReduite, 'Personne à mobilité réduite : ', {'label_attr': {'class': 'form-check-label'}}) }}
			{{ form_widget(formReservation.PersonneAMobiliteReduite , {'attr': {'disabled': true}}) }}
			{{ form_errors(formReservation.PersonneAMobiliteReduite) }}
		</div>

		{# Une fois sélectionner on donne le NB PLACEPMR ( si case à chocher == True ) pour l'utilisatuer  #}
		<div class="form-group">
			{{ form_label(formReservation.NbPlacesPMR, 'Sélectionnez le nombre de place(s) (PMR) : ', {'label_attr': {'class': 'form-label mt-4'}}) }}
			{{ form_widget(formReservation.NbPlacesPMR, {'attr': {'disabled': true}})  }}
			{{ form_errors(formReservation.NbPlacesPMR) }}
		</div>
		{# Une fois sélectionner on donne le NB PLACE pour l'utilisatuer  #}
		<div class="form-group">
			{{ form_label(formReservation.NbPlaces, 'Sélectionnez le nombre de place(s) que vous souhaitez réserver :', {'label_attr': {'class': 'form-label mt-4'}}) }}
			{{ form_widget(formReservation.NbPlaces, {'attr': {'disabled': true}})  }}
			{{ form_errors(formReservation.NbPlaces) }}
		</div>

		<span>
			<div class="form-group">

				{{ form_label(formReservation.Prix, 'Prix ',  {'label_attr': {'class': 'form-label mt-4'}})}}
				{{ form_widget(formReservation.Prix, {'attr': {'disabled': true}}) }}
				{{ form_errors(formReservation.Prix) }}
			</div>

			{# Si plus de place == 0 dans ce cas Message "Il n'y a plus de place pour la séance selectionné "  #}

			{{ form_end(formReservation) }}


		</fieldset>


		{% if not app.user %}

			<a class="btn btn-primary" href="{{ path('security_registration')}}">Valider</a>

		{% else %}
			<button type="submit" class="btn btn-primary" id="submit-button">
				Valider
			</button>

		{% endif %}

	{% endblock %}
