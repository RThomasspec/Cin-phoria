security:
    role_hierarchy:
        ROLE_ADMIN:       [ROLE_CLIENT, ROLE_EMPLOYE]
        ROLE_EMPLOYE:       [ROLE_CLIENT]

    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        App\Entity\User: 'auto'
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        users_in_memory: { memory: null }
        # Nom du provider
        in_database:
            # Nom de l'entité sur le quel il est basé, et donc sur le quel il va rechercher en base
            entity:
                class: App\Entity\Utilisateur
                # Il va rechercher les utilisateur par leur email
                property: mail
    firewalls:
 # Firewall pour le login API
        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login
                username_path: email
                password_path: password
                success_handler: App\Security\CustomAuthenticationSuccessHandler
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
                provider: in_database

        login_employee:
            pattern: ^/api/login/employe
            stateless: true
            json_login:
                check_path: /api/login/employe
                username_path: email
                password_path: password
                success_handler: App\Security\EmployeeAuthenticationSuccessHandler
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
                provider: in_database
  # Firewall pour les requêtes API authentifiées
        api:
            pattern: ^/api
            stateless: true
            jwt: ~ 
            provider: in_database
            
 # Firewall pour les devs
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

 # Firewall pour les pages web
        main:
            lazy: true
            provider: in_database
           #Permet de dire que l'on utilisera un formulaire pour la connexion
            form_login:
                login_path: security_login
               # Symfony utilise la meme route pour chercher le formulaire et vérifier les données du formulaire
                check_path: security_login
                default_target_path: app_login
                #username_parameter: username
                #password_parameter: password
            custom_authenticator: App\Security\LoginFormAuthenticator
            # Définit quel authenticateur utiliser en premier 
            entry_point: App\Security\LoginFormAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route

            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800
                path: /
                always_remember_me: true

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:

        # - { path: ^/film_create, roles: ROLE_ADMIN, ROLE_EMPLOYE }
        # - { path: ^/security_registration, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
